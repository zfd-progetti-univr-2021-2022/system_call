.TH "md_theory_shared_memory_shared_memory" 3 "Ven 6 Mag 2022" "Version 0.0.1" "SYSTEM_CALL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_theory_shared_memory_shared_memoryTeoria: memoria condivisa 
 \- E' una porzione di memoria gestita dal kernel e che e' condivisa tra piu' processi\&.
.PP
I dati posso essere scritti e letti immediatamente sulla memoria: e' necessario un sistema di sincronizzazione come, ad esempio, i semafori\&.
.PP
.SS "Creazione memoria condivisa"
.PP
La system call \fCshmget()\fP permette di creare una nuova memoria condivisa oppure di ottenere un identificatore di un segmento di memoria gia' esistente\&. 
.PP
.nf
#include <sys/shm\&.h>
// Returns a shared memory segment identifier on success, or -1 on error
int shmget(key_t key, size_t size, int shmflg);

.fi
.PP
.PP
La memoria creata sara' inizializzata a 0\&.
.PP
I parametri sono:
.IP "\(bu" 2
\fCkey\fP: chiave IPC
.IP "\(bu" 2
\fCsize\fP: dimensione desiderata della memoria condivisa in byte 
.PP
.RS 4
La dimensione viene arrottondata al multiplo superiore della dimensione di pagina del sistema\&. Se non si vuole creare una memoria condivisa esistente deve essere minore o uguale al valore size con cui era stata creata precedentemente\&. 
.RE
.PP

.IP "\(bu" 2
\fCshmflg\fP: specificano i permessi\&.
.PP
Possono essere usate tutte le flag di \fCmode\fP per i file e in piu' possono essere usate anche:
.IP "  \(bu" 4
\fCIPC_CREAT\fP: se non esiste un segmento di memoria legato alla chiave attuale, creane uno nuovo
.IP "  \(bu" 4
\fCIPC_EXCL\fP: se usato con \fCIPC_CREAT\fP, permette al comando di fallire se esiste gia' una memoria condivisa legata alla chiave \fCkey\fP
.PP

.PP
.PP
Per vedere come generare la chiave andare nella \fCsezione relativa qui\fP
.PP
Esempi creazione memoria condivisa: 
.PP
.nf
int shmid;
ket_t key = //\&.\&.\&. (generazione chiave)

size_t size = //\&.\&.\&. (dimensione calcolabile)

// A) Crea la memoria condivisa facendo scegliere al kernel la chiave
shmid = shmget(IPC_PRIVATE, size, S_IRUSR | S_IWUSR);

// B) Crea la memoria condivisa utilizzando la chiave key, solo se non esiste
shmid = shmget(key, size, IPC_CREAT | S_IRUSR | S_IWUSR);

// C) Crea la memoria condivisa utilizzando la chiave key,
//    fallisce se la memoria e' gia' esistente
shmid = shmget(key, size, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

.fi
.PP
.PP
.SS "Collegamento alla memoria condivisa"
.PP
Per usare la memoria condivisa bisogna aggiungerla allo spazio degli indirizzi del processo (in modo virtuale) con la system call:
.PP
.PP
.nf
#include <sys/shm\&.h>
// Returns address at which shared memory is attached on success
// or (void *)-1 on error
void *shmat(int shmid, const void *shmaddr, int shmflg);
.fi
.PP
 
.PP
.RS 4
shmat sta per 'shared memory attach' 
.RE
.PP
.PP
Dove:
.IP "\(bu" 2
\fCshmid\fP: e' l'identificativo ottenuto dalla chiave
.IP "\(bu" 2
\fCshmaddr\fP:
.IP "  \(bu" 4
NULL: il kernel sceglie l'indirizzo in cui 'collegare' la memoria condivisa\&. > Ignora le flag\&.
.PP
.PP
> Questa opzione permette di rendere l'applicazione il piu' portatile possibile e riduce il rischio di collegare la memoria in zone gia' occupate (evitando cosi' di andare in errore)
.IP "  \(bu" 4
indirizzo: se \fCshmflg\fP e' \fCSHM_RND\fP verra' utilizzato indirizzo in cui 'collegare' la memoria condivisa
.PP

.IP "\(bu" 2
\fCshmflg\fP:
.IP "  \(bu" 4
\fCSHM_RND\fP: permette di usare l'indirizzo \fCshmaddr\fP > RND sta per round ed ha a che fare con l'arrotondamento della dimensione delle pagine
.IP "  \(bu" 4
\fCSHM_RDONLY\fP: imposta la memoria condivisa in sola lettura
.IP "  \(bu" 4
0: modalita' lettura e scrittura
.PP

.PP
.PP
I processi figlio ereditano le shared memory del padre\&.
.PP
Esempio: 
.PP
.nf
// ottieni puntatore per gestire la memoria condivisa
// in modalita' lettura/scritura
int *ptr_1 = (int *)shmat(shmid, NULL, 0);

if (prt_1 == -1) {
    ErrExit("shmat failed");
}

// ottieni puntatore per gestire la memoria condivisa in sola lettura
int *ptr_2 = (int *)shmat(shmid, NULL, SHM_RDONLY);

if (prt_2 == -1) {
    ErrExit("shmat failed");
}

// scrivi la memoria condivisa usando il puntatore mod\&. lettura/scrittura
for (int i = 0; i < 10; ++i)
    ptr_1[i] = i;

// leggi la memoria condivisa con il puntatore in mod\&. lettura
for (int i = 0; i < 10; ++i)
    printf("integer: %d\n", ptr_2[i]);

.fi
.PP
.PP
.SS "Scollegamento della memoria condivisa"
.PP
Quando un processo non necessita' piu' di una memoria condivisa puo' scollegarla eseguendo: 
.PP
.nf
#include <sys/shm\&.h>
// Returns 0 on success, or -1 on error
int shmdt(const void *shmaddr);

.fi
.PP
.PP
Dove:
.IP "\(bu" 2
\fCshmaddr\fP: indirizzo della memoria da scollegare 
.PP
.RS 4
Valore restituito da \fCshmat\fP 
.RE
.PP

.PP
.PP
Le memorie condivise vengono scollegate automaticamente quando:
.IP "\(bu" 2
viene eseguito una exec
.IP "\(bu" 2
viene terminato il processo
.PP
.PP
Esempio: 
.PP
.nf
// collega la memoria condivisa in lettura/scrittura
int *ptr_1 = (int *)shmat(shmid, NULL, 0);
if (ptr_1 == (void *)-1)
    errExit("first shmat failed");

// scollega la memoria condivisa
if (shmdt(ptr_1) == -1)
    errExit("shmdt failed");

.fi
.PP
.PP
.SS "Operazioni di controllo"
.PP
La system call \fCshmctl\fP permette di controllare la memoria condivisa\&.
.PP
.PP
.nf
#include <sys/msg\&.h>
// Returns 0 on success, or -1 error
int shmctl(int shmid, int cmd, struct shmid_ds *buf);
.fi
.PP
.PP
Dove:
.IP "\(bu" 2
\fCshmid\fP: identificativo ottenuto dalla chiave
.IP "\(bu" 2
\fCcmd\fP: comando da eseguire
.IP "  \(bu" 4
\fCIPC_RMID\fP: quando tutti i processi si saranno scollegati dalla memoria condivisa, questa verra' cancellata
.IP "  \(bu" 4
\fCIPC_STAT\fP: memorizza in \fCbuf\fP le statistiche della memoria condivisa
.IP "  \(bu" 4
\fCIPC_SET\fP: usa \fCbuf\fP per modificare le proprieta' della memoria condivisa > L'unico campo modificabile e' \fCshm_perm\fP
.PP

.IP "\(bu" 2
\fCbuf\fP: puntatore a struttura dati usata per memorizzare/impostare proprieta' della memoria condivisa
.PP
.PP
.PP
.nf
if (shmctl(shmid, IPC_RMID, NULL) == -1)
    errExit("shmctl failed");
else
    printf("shared memory segment removed successfully\n");
.fi
.PP
.PP
Struttura shmid_ds buf: 
.PP
.nf
struct shmid_ds {
    struct ipc_perm shm_perm; // permessi e proprietario (kernel)
    size_t shm_segsz; // dimensione in byte
    time_t shm_atime; // tempo dell'ultima shmat()
    time_t shm_dtime; // tempo dell'ultimo shmdt()
    time_t shm_ctime; // tempo dell'ultima modifica
    pid_t shm_cpid; // PID del creatore
    pid_t shm_lpid; // PID dell'ultimo shmat() / shmdt()
    shmatt_t shm_nattch; // Numero di processi attualmente collegati
};

.fi
.PP
.PP
L'unico campo modificabile e' \fCshm_perm\fP per gestire i permessi\&. 
