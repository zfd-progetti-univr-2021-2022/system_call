.TH "md_theory_generate_keys_generate_keys" 3 "Sab 9 Apr 2022" "Version 0.0.1" "SYSTEM_CALL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_theory_generate_keys_generate_keysTeoria: generare chiavi per le IPC 
 \- Le chiavi sono dei numeri interi che servono ad alcune system call per creare una IPC (se non esiste gia') e restituire il suo identificatore che permette poi di utilizzarla per comunicare con altri processi\&. 
.PP
.RS 4
Le IPC sono meccanismi di comunicazione tra processi\&. Puo' essere la memoria condivisa, la coda FIFO, la PIPE, i segnali, i semafori, le code di messaggi\&. 
.RE
.PP
.PP
Per fare un'analogia con i file di testo e' possibile vedere le chiavi come il percorso del file e l'identificatore come il file descriptor:
.IP "\(bu" 2
I primi servono per creare i secondi
.IP "\(bu" 2
I secondi permettono di gestire il file/la IPC
.PP
.PP
I processi che conoscono la chiave possono comunicare fra di loro creando ed utilizzando le IPC\&.
.PP
Per creare le chiavi esistono piu' modi diversi\&.
.PP
.SS "Macro IPC_PRIVATE"
.PP
La macro \fCIPC_PRIVATE\fP permette di generare una chiave che sara' sicuramente univoca perche' il kernel ce lo garantira'\&.
.PP
Esempio di creazione di un semaforo utilizzando la macro: 
.PP
.nf
id = semget(IPC_PRIVATE, 10, S_IRUSR | S_IWUSR);

.fi
.PP
.PP
E' comoda quando un processo padre crea la IPC prima di creare i processi figli con cui comunichera' in seguito\&.
.PP
E' difficile utilizzarla quando i processi che devono comunicare non sono imparentati\&.
.PP
.SS "Funzione file to key"
.PP
La funzione \fCftok()\fP (file to key) converte il percorso di un file ed un identificativo di progetto in una chiave\&.
.PP
.PP
.nf
#include <sys/ipc\&.h>
// Returns integer key on succcess, or -1 on error (check errno)
key_t ftok(char *pathname, int proj_id);
.fi
.PP
 
.PP
.RS 4
Vengono usati solo gli ultimi 8 bit di proj_id 
.RE
.PP
.PP
Il file nel percorso pathname deve essere esistente e accessibile (bisogna avere i permessi giusti)
.PP
.PP
.nf
Esempio:
key_t key = ftok("/mydir/myfile", 'a');
if (key == -1)
    errExit("ftok failed");

int id = semget(key, 10, S_IRUSR | S_IWUSR);

if (id == -1)
    errExit("semget failed");
.fi
.PP
.PP
Questa opzione e' comoda per far comunicare processi non imparentati mantenendo un punto di riferimento fisso\&.
.PP
.SS "Inserimento manuale"
.PP
Per progetti semplici posso scegliere di fissare un numero per gestire le IPC\&.
.PP
Questa opzione e' comoda per far comunicare processi non imparentati in progetti piccoli\&. 
